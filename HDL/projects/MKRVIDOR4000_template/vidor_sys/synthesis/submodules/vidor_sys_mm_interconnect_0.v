// vidor_sys_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module vidor_sys_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                           //                                         clk_0_clk.clk
		input  wire        spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset, // spi_avalon_bridge_clk_reset_reset_bridge_in_reset.reset
		input  wire [31:0] spi_avalon_bridge_avalon_master_address,                 //                   spi_avalon_bridge_avalon_master.address
		output wire        spi_avalon_bridge_avalon_master_waitrequest,             //                                                  .waitrequest
		input  wire [3:0]  spi_avalon_bridge_avalon_master_byteenable,              //                                                  .byteenable
		input  wire        spi_avalon_bridge_avalon_master_read,                    //                                                  .read
		output wire [31:0] spi_avalon_bridge_avalon_master_readdata,                //                                                  .readdata
		output wire        spi_avalon_bridge_avalon_master_readdatavalid,           //                                                  .readdatavalid
		input  wire        spi_avalon_bridge_avalon_master_write,                   //                                                  .write
		input  wire [31:0] spi_avalon_bridge_avalon_master_writedata,               //                                                  .writedata
		output wire [15:0] id_switch_0_avalon_slave_address,                        //                          id_switch_0_avalon_slave.address
		output wire        id_switch_0_avalon_slave_write,                          //                                                  .write
		output wire        id_switch_0_avalon_slave_read,                           //                                                  .read
		input  wire [31:0] id_switch_0_avalon_slave_readdata,                       //                                                  .readdata
		output wire [31:0] id_switch_0_avalon_slave_writedata,                      //                                                  .writedata
		input  wire        id_switch_0_avalon_slave_waitrequest,                    //                                                  .waitrequest
		output wire [7:0]  piezo_controller_0_s1_address,                           //                             piezo_controller_0_s1.address
		output wire        piezo_controller_0_s1_write,                             //                                                  .write
		output wire        piezo_controller_0_s1_read,                              //                                                  .read
		input  wire [15:0] piezo_controller_0_s1_readdata,                          //                                                  .readdata
		output wire [15:0] piezo_controller_0_s1_writedata,                         //                                                  .writedata
		output wire [15:0] ptp_simple_us_0_avalon_slave_address,                    //                      ptp_simple_us_0_avalon_slave.address
		output wire        ptp_simple_us_0_avalon_slave_write,                      //                                                  .write
		output wire        ptp_simple_us_0_avalon_slave_read,                       //                                                  .read
		input  wire [31:0] ptp_simple_us_0_avalon_slave_readdata,                   //                                                  .readdata
		output wire [31:0] ptp_simple_us_0_avalon_slave_writedata,                  //                                                  .writedata
		input  wire        ptp_simple_us_0_avalon_slave_waitrequest,                //                                                  .waitrequest
		output wire [15:0] realtime_clock_controll_0_avalon_slave_address,          //            realtime_clock_controll_0_avalon_slave.address
		output wire        realtime_clock_controll_0_avalon_slave_write,            //                                                  .write
		output wire        realtime_clock_controll_0_avalon_slave_read,             //                                                  .read
		input  wire [31:0] realtime_clock_controll_0_avalon_slave_readdata,         //                                                  .readdata
		output wire [31:0] realtime_clock_controll_0_avalon_slave_writedata,        //                                                  .writedata
		input  wire        realtime_clock_controll_0_avalon_slave_waitrequest       //                                                  .waitrequest
	);

	wire          spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_waitrequest;   // spi_avalon_bridge_avalon_master_agent:av_waitrequest -> spi_avalon_bridge_avalon_master_translator:uav_waitrequest
	wire   [31:0] spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_readdata;      // spi_avalon_bridge_avalon_master_agent:av_readdata -> spi_avalon_bridge_avalon_master_translator:uav_readdata
	wire          spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_debugaccess;   // spi_avalon_bridge_avalon_master_translator:uav_debugaccess -> spi_avalon_bridge_avalon_master_agent:av_debugaccess
	wire   [31:0] spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_address;       // spi_avalon_bridge_avalon_master_translator:uav_address -> spi_avalon_bridge_avalon_master_agent:av_address
	wire          spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_read;          // spi_avalon_bridge_avalon_master_translator:uav_read -> spi_avalon_bridge_avalon_master_agent:av_read
	wire    [3:0] spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_byteenable;    // spi_avalon_bridge_avalon_master_translator:uav_byteenable -> spi_avalon_bridge_avalon_master_agent:av_byteenable
	wire          spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_readdatavalid; // spi_avalon_bridge_avalon_master_agent:av_readdatavalid -> spi_avalon_bridge_avalon_master_translator:uav_readdatavalid
	wire          spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_lock;          // spi_avalon_bridge_avalon_master_translator:uav_lock -> spi_avalon_bridge_avalon_master_agent:av_lock
	wire          spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_write;         // spi_avalon_bridge_avalon_master_translator:uav_write -> spi_avalon_bridge_avalon_master_agent:av_write
	wire   [31:0] spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_writedata;     // spi_avalon_bridge_avalon_master_translator:uav_writedata -> spi_avalon_bridge_avalon_master_agent:av_writedata
	wire    [2:0] spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_burstcount;    // spi_avalon_bridge_avalon_master_translator:uav_burstcount -> spi_avalon_bridge_avalon_master_agent:av_burstcount
	wire   [31:0] id_switch_0_avalon_slave_agent_m0_readdata;                                         // id_switch_0_avalon_slave_translator:uav_readdata -> id_switch_0_avalon_slave_agent:m0_readdata
	wire          id_switch_0_avalon_slave_agent_m0_waitrequest;                                      // id_switch_0_avalon_slave_translator:uav_waitrequest -> id_switch_0_avalon_slave_agent:m0_waitrequest
	wire          id_switch_0_avalon_slave_agent_m0_debugaccess;                                      // id_switch_0_avalon_slave_agent:m0_debugaccess -> id_switch_0_avalon_slave_translator:uav_debugaccess
	wire   [31:0] id_switch_0_avalon_slave_agent_m0_address;                                          // id_switch_0_avalon_slave_agent:m0_address -> id_switch_0_avalon_slave_translator:uav_address
	wire    [3:0] id_switch_0_avalon_slave_agent_m0_byteenable;                                       // id_switch_0_avalon_slave_agent:m0_byteenable -> id_switch_0_avalon_slave_translator:uav_byteenable
	wire          id_switch_0_avalon_slave_agent_m0_read;                                             // id_switch_0_avalon_slave_agent:m0_read -> id_switch_0_avalon_slave_translator:uav_read
	wire          id_switch_0_avalon_slave_agent_m0_readdatavalid;                                    // id_switch_0_avalon_slave_translator:uav_readdatavalid -> id_switch_0_avalon_slave_agent:m0_readdatavalid
	wire          id_switch_0_avalon_slave_agent_m0_lock;                                             // id_switch_0_avalon_slave_agent:m0_lock -> id_switch_0_avalon_slave_translator:uav_lock
	wire   [31:0] id_switch_0_avalon_slave_agent_m0_writedata;                                        // id_switch_0_avalon_slave_agent:m0_writedata -> id_switch_0_avalon_slave_translator:uav_writedata
	wire          id_switch_0_avalon_slave_agent_m0_write;                                            // id_switch_0_avalon_slave_agent:m0_write -> id_switch_0_avalon_slave_translator:uav_write
	wire    [2:0] id_switch_0_avalon_slave_agent_m0_burstcount;                                       // id_switch_0_avalon_slave_agent:m0_burstcount -> id_switch_0_avalon_slave_translator:uav_burstcount
	wire          id_switch_0_avalon_slave_agent_rf_source_valid;                                     // id_switch_0_avalon_slave_agent:rf_source_valid -> id_switch_0_avalon_slave_agent_rsp_fifo:in_valid
	wire  [104:0] id_switch_0_avalon_slave_agent_rf_source_data;                                      // id_switch_0_avalon_slave_agent:rf_source_data -> id_switch_0_avalon_slave_agent_rsp_fifo:in_data
	wire          id_switch_0_avalon_slave_agent_rf_source_ready;                                     // id_switch_0_avalon_slave_agent_rsp_fifo:in_ready -> id_switch_0_avalon_slave_agent:rf_source_ready
	wire          id_switch_0_avalon_slave_agent_rf_source_startofpacket;                             // id_switch_0_avalon_slave_agent:rf_source_startofpacket -> id_switch_0_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          id_switch_0_avalon_slave_agent_rf_source_endofpacket;                               // id_switch_0_avalon_slave_agent:rf_source_endofpacket -> id_switch_0_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          id_switch_0_avalon_slave_agent_rsp_fifo_out_valid;                                  // id_switch_0_avalon_slave_agent_rsp_fifo:out_valid -> id_switch_0_avalon_slave_agent:rf_sink_valid
	wire  [104:0] id_switch_0_avalon_slave_agent_rsp_fifo_out_data;                                   // id_switch_0_avalon_slave_agent_rsp_fifo:out_data -> id_switch_0_avalon_slave_agent:rf_sink_data
	wire          id_switch_0_avalon_slave_agent_rsp_fifo_out_ready;                                  // id_switch_0_avalon_slave_agent:rf_sink_ready -> id_switch_0_avalon_slave_agent_rsp_fifo:out_ready
	wire          id_switch_0_avalon_slave_agent_rsp_fifo_out_startofpacket;                          // id_switch_0_avalon_slave_agent_rsp_fifo:out_startofpacket -> id_switch_0_avalon_slave_agent:rf_sink_startofpacket
	wire          id_switch_0_avalon_slave_agent_rsp_fifo_out_endofpacket;                            // id_switch_0_avalon_slave_agent_rsp_fifo:out_endofpacket -> id_switch_0_avalon_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> id_switch_0_avalon_slave_agent:cp_valid
	wire  [103:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> id_switch_0_avalon_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                  // id_switch_0_avalon_slave_agent:cp_ready -> cmd_mux:src_ready
	wire    [3:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> id_switch_0_avalon_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> id_switch_0_avalon_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> id_switch_0_avalon_slave_agent:cp_endofpacket
	wire   [31:0] ptp_simple_us_0_avalon_slave_agent_m0_readdata;                                     // ptp_simple_us_0_avalon_slave_translator:uav_readdata -> ptp_simple_us_0_avalon_slave_agent:m0_readdata
	wire          ptp_simple_us_0_avalon_slave_agent_m0_waitrequest;                                  // ptp_simple_us_0_avalon_slave_translator:uav_waitrequest -> ptp_simple_us_0_avalon_slave_agent:m0_waitrequest
	wire          ptp_simple_us_0_avalon_slave_agent_m0_debugaccess;                                  // ptp_simple_us_0_avalon_slave_agent:m0_debugaccess -> ptp_simple_us_0_avalon_slave_translator:uav_debugaccess
	wire   [31:0] ptp_simple_us_0_avalon_slave_agent_m0_address;                                      // ptp_simple_us_0_avalon_slave_agent:m0_address -> ptp_simple_us_0_avalon_slave_translator:uav_address
	wire    [3:0] ptp_simple_us_0_avalon_slave_agent_m0_byteenable;                                   // ptp_simple_us_0_avalon_slave_agent:m0_byteenable -> ptp_simple_us_0_avalon_slave_translator:uav_byteenable
	wire          ptp_simple_us_0_avalon_slave_agent_m0_read;                                         // ptp_simple_us_0_avalon_slave_agent:m0_read -> ptp_simple_us_0_avalon_slave_translator:uav_read
	wire          ptp_simple_us_0_avalon_slave_agent_m0_readdatavalid;                                // ptp_simple_us_0_avalon_slave_translator:uav_readdatavalid -> ptp_simple_us_0_avalon_slave_agent:m0_readdatavalid
	wire          ptp_simple_us_0_avalon_slave_agent_m0_lock;                                         // ptp_simple_us_0_avalon_slave_agent:m0_lock -> ptp_simple_us_0_avalon_slave_translator:uav_lock
	wire   [31:0] ptp_simple_us_0_avalon_slave_agent_m0_writedata;                                    // ptp_simple_us_0_avalon_slave_agent:m0_writedata -> ptp_simple_us_0_avalon_slave_translator:uav_writedata
	wire          ptp_simple_us_0_avalon_slave_agent_m0_write;                                        // ptp_simple_us_0_avalon_slave_agent:m0_write -> ptp_simple_us_0_avalon_slave_translator:uav_write
	wire    [2:0] ptp_simple_us_0_avalon_slave_agent_m0_burstcount;                                   // ptp_simple_us_0_avalon_slave_agent:m0_burstcount -> ptp_simple_us_0_avalon_slave_translator:uav_burstcount
	wire          ptp_simple_us_0_avalon_slave_agent_rf_source_valid;                                 // ptp_simple_us_0_avalon_slave_agent:rf_source_valid -> ptp_simple_us_0_avalon_slave_agent_rsp_fifo:in_valid
	wire  [104:0] ptp_simple_us_0_avalon_slave_agent_rf_source_data;                                  // ptp_simple_us_0_avalon_slave_agent:rf_source_data -> ptp_simple_us_0_avalon_slave_agent_rsp_fifo:in_data
	wire          ptp_simple_us_0_avalon_slave_agent_rf_source_ready;                                 // ptp_simple_us_0_avalon_slave_agent_rsp_fifo:in_ready -> ptp_simple_us_0_avalon_slave_agent:rf_source_ready
	wire          ptp_simple_us_0_avalon_slave_agent_rf_source_startofpacket;                         // ptp_simple_us_0_avalon_slave_agent:rf_source_startofpacket -> ptp_simple_us_0_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          ptp_simple_us_0_avalon_slave_agent_rf_source_endofpacket;                           // ptp_simple_us_0_avalon_slave_agent:rf_source_endofpacket -> ptp_simple_us_0_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          ptp_simple_us_0_avalon_slave_agent_rsp_fifo_out_valid;                              // ptp_simple_us_0_avalon_slave_agent_rsp_fifo:out_valid -> ptp_simple_us_0_avalon_slave_agent:rf_sink_valid
	wire  [104:0] ptp_simple_us_0_avalon_slave_agent_rsp_fifo_out_data;                               // ptp_simple_us_0_avalon_slave_agent_rsp_fifo:out_data -> ptp_simple_us_0_avalon_slave_agent:rf_sink_data
	wire          ptp_simple_us_0_avalon_slave_agent_rsp_fifo_out_ready;                              // ptp_simple_us_0_avalon_slave_agent:rf_sink_ready -> ptp_simple_us_0_avalon_slave_agent_rsp_fifo:out_ready
	wire          ptp_simple_us_0_avalon_slave_agent_rsp_fifo_out_startofpacket;                      // ptp_simple_us_0_avalon_slave_agent_rsp_fifo:out_startofpacket -> ptp_simple_us_0_avalon_slave_agent:rf_sink_startofpacket
	wire          ptp_simple_us_0_avalon_slave_agent_rsp_fifo_out_endofpacket;                        // ptp_simple_us_0_avalon_slave_agent_rsp_fifo:out_endofpacket -> ptp_simple_us_0_avalon_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> ptp_simple_us_0_avalon_slave_agent:cp_valid
	wire  [103:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> ptp_simple_us_0_avalon_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                              // ptp_simple_us_0_avalon_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [3:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> ptp_simple_us_0_avalon_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> ptp_simple_us_0_avalon_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> ptp_simple_us_0_avalon_slave_agent:cp_endofpacket
	wire   [31:0] realtime_clock_controll_0_avalon_slave_agent_m0_readdata;                           // realtime_clock_controll_0_avalon_slave_translator:uav_readdata -> realtime_clock_controll_0_avalon_slave_agent:m0_readdata
	wire          realtime_clock_controll_0_avalon_slave_agent_m0_waitrequest;                        // realtime_clock_controll_0_avalon_slave_translator:uav_waitrequest -> realtime_clock_controll_0_avalon_slave_agent:m0_waitrequest
	wire          realtime_clock_controll_0_avalon_slave_agent_m0_debugaccess;                        // realtime_clock_controll_0_avalon_slave_agent:m0_debugaccess -> realtime_clock_controll_0_avalon_slave_translator:uav_debugaccess
	wire   [31:0] realtime_clock_controll_0_avalon_slave_agent_m0_address;                            // realtime_clock_controll_0_avalon_slave_agent:m0_address -> realtime_clock_controll_0_avalon_slave_translator:uav_address
	wire    [3:0] realtime_clock_controll_0_avalon_slave_agent_m0_byteenable;                         // realtime_clock_controll_0_avalon_slave_agent:m0_byteenable -> realtime_clock_controll_0_avalon_slave_translator:uav_byteenable
	wire          realtime_clock_controll_0_avalon_slave_agent_m0_read;                               // realtime_clock_controll_0_avalon_slave_agent:m0_read -> realtime_clock_controll_0_avalon_slave_translator:uav_read
	wire          realtime_clock_controll_0_avalon_slave_agent_m0_readdatavalid;                      // realtime_clock_controll_0_avalon_slave_translator:uav_readdatavalid -> realtime_clock_controll_0_avalon_slave_agent:m0_readdatavalid
	wire          realtime_clock_controll_0_avalon_slave_agent_m0_lock;                               // realtime_clock_controll_0_avalon_slave_agent:m0_lock -> realtime_clock_controll_0_avalon_slave_translator:uav_lock
	wire   [31:0] realtime_clock_controll_0_avalon_slave_agent_m0_writedata;                          // realtime_clock_controll_0_avalon_slave_agent:m0_writedata -> realtime_clock_controll_0_avalon_slave_translator:uav_writedata
	wire          realtime_clock_controll_0_avalon_slave_agent_m0_write;                              // realtime_clock_controll_0_avalon_slave_agent:m0_write -> realtime_clock_controll_0_avalon_slave_translator:uav_write
	wire    [2:0] realtime_clock_controll_0_avalon_slave_agent_m0_burstcount;                         // realtime_clock_controll_0_avalon_slave_agent:m0_burstcount -> realtime_clock_controll_0_avalon_slave_translator:uav_burstcount
	wire          realtime_clock_controll_0_avalon_slave_agent_rf_source_valid;                       // realtime_clock_controll_0_avalon_slave_agent:rf_source_valid -> realtime_clock_controll_0_avalon_slave_agent_rsp_fifo:in_valid
	wire  [104:0] realtime_clock_controll_0_avalon_slave_agent_rf_source_data;                        // realtime_clock_controll_0_avalon_slave_agent:rf_source_data -> realtime_clock_controll_0_avalon_slave_agent_rsp_fifo:in_data
	wire          realtime_clock_controll_0_avalon_slave_agent_rf_source_ready;                       // realtime_clock_controll_0_avalon_slave_agent_rsp_fifo:in_ready -> realtime_clock_controll_0_avalon_slave_agent:rf_source_ready
	wire          realtime_clock_controll_0_avalon_slave_agent_rf_source_startofpacket;               // realtime_clock_controll_0_avalon_slave_agent:rf_source_startofpacket -> realtime_clock_controll_0_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          realtime_clock_controll_0_avalon_slave_agent_rf_source_endofpacket;                 // realtime_clock_controll_0_avalon_slave_agent:rf_source_endofpacket -> realtime_clock_controll_0_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          realtime_clock_controll_0_avalon_slave_agent_rsp_fifo_out_valid;                    // realtime_clock_controll_0_avalon_slave_agent_rsp_fifo:out_valid -> realtime_clock_controll_0_avalon_slave_agent:rf_sink_valid
	wire  [104:0] realtime_clock_controll_0_avalon_slave_agent_rsp_fifo_out_data;                     // realtime_clock_controll_0_avalon_slave_agent_rsp_fifo:out_data -> realtime_clock_controll_0_avalon_slave_agent:rf_sink_data
	wire          realtime_clock_controll_0_avalon_slave_agent_rsp_fifo_out_ready;                    // realtime_clock_controll_0_avalon_slave_agent:rf_sink_ready -> realtime_clock_controll_0_avalon_slave_agent_rsp_fifo:out_ready
	wire          realtime_clock_controll_0_avalon_slave_agent_rsp_fifo_out_startofpacket;            // realtime_clock_controll_0_avalon_slave_agent_rsp_fifo:out_startofpacket -> realtime_clock_controll_0_avalon_slave_agent:rf_sink_startofpacket
	wire          realtime_clock_controll_0_avalon_slave_agent_rsp_fifo_out_endofpacket;              // realtime_clock_controll_0_avalon_slave_agent_rsp_fifo:out_endofpacket -> realtime_clock_controll_0_avalon_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                              // cmd_mux_002:src_valid -> realtime_clock_controll_0_avalon_slave_agent:cp_valid
	wire  [103:0] cmd_mux_002_src_data;                                                               // cmd_mux_002:src_data -> realtime_clock_controll_0_avalon_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                              // realtime_clock_controll_0_avalon_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [3:0] cmd_mux_002_src_channel;                                                            // cmd_mux_002:src_channel -> realtime_clock_controll_0_avalon_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                      // cmd_mux_002:src_startofpacket -> realtime_clock_controll_0_avalon_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                        // cmd_mux_002:src_endofpacket -> realtime_clock_controll_0_avalon_slave_agent:cp_endofpacket
	wire   [15:0] piezo_controller_0_s1_agent_m0_readdata;                                            // piezo_controller_0_s1_translator:uav_readdata -> piezo_controller_0_s1_agent:m0_readdata
	wire          piezo_controller_0_s1_agent_m0_waitrequest;                                         // piezo_controller_0_s1_translator:uav_waitrequest -> piezo_controller_0_s1_agent:m0_waitrequest
	wire          piezo_controller_0_s1_agent_m0_debugaccess;                                         // piezo_controller_0_s1_agent:m0_debugaccess -> piezo_controller_0_s1_translator:uav_debugaccess
	wire   [31:0] piezo_controller_0_s1_agent_m0_address;                                             // piezo_controller_0_s1_agent:m0_address -> piezo_controller_0_s1_translator:uav_address
	wire    [1:0] piezo_controller_0_s1_agent_m0_byteenable;                                          // piezo_controller_0_s1_agent:m0_byteenable -> piezo_controller_0_s1_translator:uav_byteenable
	wire          piezo_controller_0_s1_agent_m0_read;                                                // piezo_controller_0_s1_agent:m0_read -> piezo_controller_0_s1_translator:uav_read
	wire          piezo_controller_0_s1_agent_m0_readdatavalid;                                       // piezo_controller_0_s1_translator:uav_readdatavalid -> piezo_controller_0_s1_agent:m0_readdatavalid
	wire          piezo_controller_0_s1_agent_m0_lock;                                                // piezo_controller_0_s1_agent:m0_lock -> piezo_controller_0_s1_translator:uav_lock
	wire   [15:0] piezo_controller_0_s1_agent_m0_writedata;                                           // piezo_controller_0_s1_agent:m0_writedata -> piezo_controller_0_s1_translator:uav_writedata
	wire          piezo_controller_0_s1_agent_m0_write;                                               // piezo_controller_0_s1_agent:m0_write -> piezo_controller_0_s1_translator:uav_write
	wire    [1:0] piezo_controller_0_s1_agent_m0_burstcount;                                          // piezo_controller_0_s1_agent:m0_burstcount -> piezo_controller_0_s1_translator:uav_burstcount
	wire          piezo_controller_0_s1_agent_rf_source_valid;                                        // piezo_controller_0_s1_agent:rf_source_valid -> piezo_controller_0_s1_agent_rsp_fifo:in_valid
	wire   [86:0] piezo_controller_0_s1_agent_rf_source_data;                                         // piezo_controller_0_s1_agent:rf_source_data -> piezo_controller_0_s1_agent_rsp_fifo:in_data
	wire          piezo_controller_0_s1_agent_rf_source_ready;                                        // piezo_controller_0_s1_agent_rsp_fifo:in_ready -> piezo_controller_0_s1_agent:rf_source_ready
	wire          piezo_controller_0_s1_agent_rf_source_startofpacket;                                // piezo_controller_0_s1_agent:rf_source_startofpacket -> piezo_controller_0_s1_agent_rsp_fifo:in_startofpacket
	wire          piezo_controller_0_s1_agent_rf_source_endofpacket;                                  // piezo_controller_0_s1_agent:rf_source_endofpacket -> piezo_controller_0_s1_agent_rsp_fifo:in_endofpacket
	wire          piezo_controller_0_s1_agent_rsp_fifo_out_valid;                                     // piezo_controller_0_s1_agent_rsp_fifo:out_valid -> piezo_controller_0_s1_agent:rf_sink_valid
	wire   [86:0] piezo_controller_0_s1_agent_rsp_fifo_out_data;                                      // piezo_controller_0_s1_agent_rsp_fifo:out_data -> piezo_controller_0_s1_agent:rf_sink_data
	wire          piezo_controller_0_s1_agent_rsp_fifo_out_ready;                                     // piezo_controller_0_s1_agent:rf_sink_ready -> piezo_controller_0_s1_agent_rsp_fifo:out_ready
	wire          piezo_controller_0_s1_agent_rsp_fifo_out_startofpacket;                             // piezo_controller_0_s1_agent_rsp_fifo:out_startofpacket -> piezo_controller_0_s1_agent:rf_sink_startofpacket
	wire          piezo_controller_0_s1_agent_rsp_fifo_out_endofpacket;                               // piezo_controller_0_s1_agent_rsp_fifo:out_endofpacket -> piezo_controller_0_s1_agent:rf_sink_endofpacket
	wire          spi_avalon_bridge_avalon_master_agent_cp_valid;                                     // spi_avalon_bridge_avalon_master_agent:cp_valid -> router:sink_valid
	wire  [103:0] spi_avalon_bridge_avalon_master_agent_cp_data;                                      // spi_avalon_bridge_avalon_master_agent:cp_data -> router:sink_data
	wire          spi_avalon_bridge_avalon_master_agent_cp_ready;                                     // router:sink_ready -> spi_avalon_bridge_avalon_master_agent:cp_ready
	wire          spi_avalon_bridge_avalon_master_agent_cp_startofpacket;                             // spi_avalon_bridge_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          spi_avalon_bridge_avalon_master_agent_cp_endofpacket;                               // spi_avalon_bridge_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          id_switch_0_avalon_slave_agent_rp_valid;                                            // id_switch_0_avalon_slave_agent:rp_valid -> router_001:sink_valid
	wire  [103:0] id_switch_0_avalon_slave_agent_rp_data;                                             // id_switch_0_avalon_slave_agent:rp_data -> router_001:sink_data
	wire          id_switch_0_avalon_slave_agent_rp_ready;                                            // router_001:sink_ready -> id_switch_0_avalon_slave_agent:rp_ready
	wire          id_switch_0_avalon_slave_agent_rp_startofpacket;                                    // id_switch_0_avalon_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          id_switch_0_avalon_slave_agent_rp_endofpacket;                                      // id_switch_0_avalon_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                               // router_001:src_valid -> rsp_demux:sink_valid
	wire  [103:0] router_001_src_data;                                                                // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                               // rsp_demux:sink_ready -> router_001:src_ready
	wire    [3:0] router_001_src_channel;                                                             // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          ptp_simple_us_0_avalon_slave_agent_rp_valid;                                        // ptp_simple_us_0_avalon_slave_agent:rp_valid -> router_002:sink_valid
	wire  [103:0] ptp_simple_us_0_avalon_slave_agent_rp_data;                                         // ptp_simple_us_0_avalon_slave_agent:rp_data -> router_002:sink_data
	wire          ptp_simple_us_0_avalon_slave_agent_rp_ready;                                        // router_002:sink_ready -> ptp_simple_us_0_avalon_slave_agent:rp_ready
	wire          ptp_simple_us_0_avalon_slave_agent_rp_startofpacket;                                // ptp_simple_us_0_avalon_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          ptp_simple_us_0_avalon_slave_agent_rp_endofpacket;                                  // ptp_simple_us_0_avalon_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                               // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [103:0] router_002_src_data;                                                                // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                                               // rsp_demux_001:sink_ready -> router_002:src_ready
	wire    [3:0] router_002_src_channel;                                                             // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          realtime_clock_controll_0_avalon_slave_agent_rp_valid;                              // realtime_clock_controll_0_avalon_slave_agent:rp_valid -> router_003:sink_valid
	wire  [103:0] realtime_clock_controll_0_avalon_slave_agent_rp_data;                               // realtime_clock_controll_0_avalon_slave_agent:rp_data -> router_003:sink_data
	wire          realtime_clock_controll_0_avalon_slave_agent_rp_ready;                              // router_003:sink_ready -> realtime_clock_controll_0_avalon_slave_agent:rp_ready
	wire          realtime_clock_controll_0_avalon_slave_agent_rp_startofpacket;                      // realtime_clock_controll_0_avalon_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          realtime_clock_controll_0_avalon_slave_agent_rp_endofpacket;                        // realtime_clock_controll_0_avalon_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                               // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [103:0] router_003_src_data;                                                                // router_003:src_data -> rsp_demux_002:sink_data
	wire          router_003_src_ready;                                                               // rsp_demux_002:sink_ready -> router_003:src_ready
	wire    [3:0] router_003_src_channel;                                                             // router_003:src_channel -> rsp_demux_002:sink_channel
	wire          router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          piezo_controller_0_s1_agent_rp_valid;                                               // piezo_controller_0_s1_agent:rp_valid -> router_004:sink_valid
	wire   [85:0] piezo_controller_0_s1_agent_rp_data;                                                // piezo_controller_0_s1_agent:rp_data -> router_004:sink_data
	wire          piezo_controller_0_s1_agent_rp_ready;                                               // router_004:sink_ready -> piezo_controller_0_s1_agent:rp_ready
	wire          piezo_controller_0_s1_agent_rp_startofpacket;                                       // piezo_controller_0_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          piezo_controller_0_s1_agent_rp_endofpacket;                                         // piezo_controller_0_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_src_valid;                                                                   // router:src_valid -> spi_avalon_bridge_avalon_master_limiter:cmd_sink_valid
	wire  [103:0] router_src_data;                                                                    // router:src_data -> spi_avalon_bridge_avalon_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                   // spi_avalon_bridge_avalon_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [3:0] router_src_channel;                                                                 // router:src_channel -> spi_avalon_bridge_avalon_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                           // router:src_startofpacket -> spi_avalon_bridge_avalon_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                             // router:src_endofpacket -> spi_avalon_bridge_avalon_master_limiter:cmd_sink_endofpacket
	wire  [103:0] spi_avalon_bridge_avalon_master_limiter_cmd_src_data;                               // spi_avalon_bridge_avalon_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          spi_avalon_bridge_avalon_master_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> spi_avalon_bridge_avalon_master_limiter:cmd_src_ready
	wire    [3:0] spi_avalon_bridge_avalon_master_limiter_cmd_src_channel;                            // spi_avalon_bridge_avalon_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          spi_avalon_bridge_avalon_master_limiter_cmd_src_startofpacket;                      // spi_avalon_bridge_avalon_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          spi_avalon_bridge_avalon_master_limiter_cmd_src_endofpacket;                        // spi_avalon_bridge_avalon_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> spi_avalon_bridge_avalon_master_limiter:rsp_sink_valid
	wire  [103:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> spi_avalon_bridge_avalon_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                  // spi_avalon_bridge_avalon_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [3:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> spi_avalon_bridge_avalon_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> spi_avalon_bridge_avalon_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> spi_avalon_bridge_avalon_master_limiter:rsp_sink_endofpacket
	wire          spi_avalon_bridge_avalon_master_limiter_rsp_src_valid;                              // spi_avalon_bridge_avalon_master_limiter:rsp_src_valid -> spi_avalon_bridge_avalon_master_agent:rp_valid
	wire  [103:0] spi_avalon_bridge_avalon_master_limiter_rsp_src_data;                               // spi_avalon_bridge_avalon_master_limiter:rsp_src_data -> spi_avalon_bridge_avalon_master_agent:rp_data
	wire          spi_avalon_bridge_avalon_master_limiter_rsp_src_ready;                              // spi_avalon_bridge_avalon_master_agent:rp_ready -> spi_avalon_bridge_avalon_master_limiter:rsp_src_ready
	wire    [3:0] spi_avalon_bridge_avalon_master_limiter_rsp_src_channel;                            // spi_avalon_bridge_avalon_master_limiter:rsp_src_channel -> spi_avalon_bridge_avalon_master_agent:rp_channel
	wire          spi_avalon_bridge_avalon_master_limiter_rsp_src_startofpacket;                      // spi_avalon_bridge_avalon_master_limiter:rsp_src_startofpacket -> spi_avalon_bridge_avalon_master_agent:rp_startofpacket
	wire          spi_avalon_bridge_avalon_master_limiter_rsp_src_endofpacket;                        // spi_avalon_bridge_avalon_master_limiter:rsp_src_endofpacket -> spi_avalon_bridge_avalon_master_agent:rp_endofpacket
	wire          piezo_controller_0_s1_burst_adapter_source0_valid;                                  // piezo_controller_0_s1_burst_adapter:source0_valid -> piezo_controller_0_s1_agent:cp_valid
	wire   [85:0] piezo_controller_0_s1_burst_adapter_source0_data;                                   // piezo_controller_0_s1_burst_adapter:source0_data -> piezo_controller_0_s1_agent:cp_data
	wire          piezo_controller_0_s1_burst_adapter_source0_ready;                                  // piezo_controller_0_s1_agent:cp_ready -> piezo_controller_0_s1_burst_adapter:source0_ready
	wire    [3:0] piezo_controller_0_s1_burst_adapter_source0_channel;                                // piezo_controller_0_s1_burst_adapter:source0_channel -> piezo_controller_0_s1_agent:cp_channel
	wire          piezo_controller_0_s1_burst_adapter_source0_startofpacket;                          // piezo_controller_0_s1_burst_adapter:source0_startofpacket -> piezo_controller_0_s1_agent:cp_startofpacket
	wire          piezo_controller_0_s1_burst_adapter_source0_endofpacket;                            // piezo_controller_0_s1_burst_adapter:source0_endofpacket -> piezo_controller_0_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [103:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [3:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                               // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [103:0] cmd_demux_src1_data;                                                                // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                               // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [3:0] cmd_demux_src1_channel;                                                             // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                       // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                         // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [103:0] cmd_demux_src2_data;                                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [3:0] cmd_demux_src2_channel;                                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                               // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [103:0] cmd_demux_src3_data;                                                                // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                               // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [3:0] cmd_demux_src3_channel;                                                             // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                       // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                         // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [103:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [3:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [103:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                           // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [3:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [103:0] rsp_demux_002_src0_data;                                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [3:0] rsp_demux_002_src0_channel;                                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                           // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [103:0] rsp_demux_003_src0_data;                                                            // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                           // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [3:0] rsp_demux_003_src0_channel;                                                         // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                   // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                     // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          router_004_src_valid;                                                               // router_004:src_valid -> piezo_controller_0_s1_rsp_width_adapter:in_valid
	wire   [85:0] router_004_src_data;                                                                // router_004:src_data -> piezo_controller_0_s1_rsp_width_adapter:in_data
	wire          router_004_src_ready;                                                               // piezo_controller_0_s1_rsp_width_adapter:in_ready -> router_004:src_ready
	wire    [3:0] router_004_src_channel;                                                             // router_004:src_channel -> piezo_controller_0_s1_rsp_width_adapter:in_channel
	wire          router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> piezo_controller_0_s1_rsp_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> piezo_controller_0_s1_rsp_width_adapter:in_endofpacket
	wire          piezo_controller_0_s1_rsp_width_adapter_src_valid;                                  // piezo_controller_0_s1_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [103:0] piezo_controller_0_s1_rsp_width_adapter_src_data;                                   // piezo_controller_0_s1_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          piezo_controller_0_s1_rsp_width_adapter_src_ready;                                  // rsp_demux_003:sink_ready -> piezo_controller_0_s1_rsp_width_adapter:out_ready
	wire    [3:0] piezo_controller_0_s1_rsp_width_adapter_src_channel;                                // piezo_controller_0_s1_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          piezo_controller_0_s1_rsp_width_adapter_src_startofpacket;                          // piezo_controller_0_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          piezo_controller_0_s1_rsp_width_adapter_src_endofpacket;                            // piezo_controller_0_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                              // cmd_mux_003:src_valid -> piezo_controller_0_s1_cmd_width_adapter:in_valid
	wire  [103:0] cmd_mux_003_src_data;                                                               // cmd_mux_003:src_data -> piezo_controller_0_s1_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                                              // piezo_controller_0_s1_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire    [3:0] cmd_mux_003_src_channel;                                                            // cmd_mux_003:src_channel -> piezo_controller_0_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                                      // cmd_mux_003:src_startofpacket -> piezo_controller_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                        // cmd_mux_003:src_endofpacket -> piezo_controller_0_s1_cmd_width_adapter:in_endofpacket
	wire          piezo_controller_0_s1_cmd_width_adapter_src_valid;                                  // piezo_controller_0_s1_cmd_width_adapter:out_valid -> piezo_controller_0_s1_burst_adapter:sink0_valid
	wire   [85:0] piezo_controller_0_s1_cmd_width_adapter_src_data;                                   // piezo_controller_0_s1_cmd_width_adapter:out_data -> piezo_controller_0_s1_burst_adapter:sink0_data
	wire          piezo_controller_0_s1_cmd_width_adapter_src_ready;                                  // piezo_controller_0_s1_burst_adapter:sink0_ready -> piezo_controller_0_s1_cmd_width_adapter:out_ready
	wire    [3:0] piezo_controller_0_s1_cmd_width_adapter_src_channel;                                // piezo_controller_0_s1_cmd_width_adapter:out_channel -> piezo_controller_0_s1_burst_adapter:sink0_channel
	wire          piezo_controller_0_s1_cmd_width_adapter_src_startofpacket;                          // piezo_controller_0_s1_cmd_width_adapter:out_startofpacket -> piezo_controller_0_s1_burst_adapter:sink0_startofpacket
	wire          piezo_controller_0_s1_cmd_width_adapter_src_endofpacket;                            // piezo_controller_0_s1_cmd_width_adapter:out_endofpacket -> piezo_controller_0_s1_burst_adapter:sink0_endofpacket
	wire    [3:0] spi_avalon_bridge_avalon_master_limiter_cmd_valid_data;                             // spi_avalon_bridge_avalon_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire          id_switch_0_avalon_slave_agent_rdata_fifo_src_valid;                                // id_switch_0_avalon_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] id_switch_0_avalon_slave_agent_rdata_fifo_src_data;                                 // id_switch_0_avalon_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          id_switch_0_avalon_slave_agent_rdata_fifo_src_ready;                                // avalon_st_adapter:in_0_ready -> id_switch_0_avalon_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                      // avalon_st_adapter:out_0_valid -> id_switch_0_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                       // avalon_st_adapter:out_0_data -> id_switch_0_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                      // id_switch_0_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                      // avalon_st_adapter:out_0_error -> id_switch_0_avalon_slave_agent:rdata_fifo_sink_error
	wire          ptp_simple_us_0_avalon_slave_agent_rdata_fifo_src_valid;                            // ptp_simple_us_0_avalon_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] ptp_simple_us_0_avalon_slave_agent_rdata_fifo_src_data;                             // ptp_simple_us_0_avalon_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          ptp_simple_us_0_avalon_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_001:in_0_ready -> ptp_simple_us_0_avalon_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                  // avalon_st_adapter_001:out_0_valid -> ptp_simple_us_0_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                   // avalon_st_adapter_001:out_0_data -> ptp_simple_us_0_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                  // ptp_simple_us_0_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                  // avalon_st_adapter_001:out_0_error -> ptp_simple_us_0_avalon_slave_agent:rdata_fifo_sink_error
	wire          realtime_clock_controll_0_avalon_slave_agent_rdata_fifo_src_valid;                  // realtime_clock_controll_0_avalon_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] realtime_clock_controll_0_avalon_slave_agent_rdata_fifo_src_data;                   // realtime_clock_controll_0_avalon_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          realtime_clock_controll_0_avalon_slave_agent_rdata_fifo_src_ready;                  // avalon_st_adapter_002:in_0_ready -> realtime_clock_controll_0_avalon_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                  // avalon_st_adapter_002:out_0_valid -> realtime_clock_controll_0_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                   // avalon_st_adapter_002:out_0_data -> realtime_clock_controll_0_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                  // realtime_clock_controll_0_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                  // avalon_st_adapter_002:out_0_error -> realtime_clock_controll_0_avalon_slave_agent:rdata_fifo_sink_error
	wire          piezo_controller_0_s1_agent_rdata_fifo_src_valid;                                   // piezo_controller_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [17:0] piezo_controller_0_s1_agent_rdata_fifo_src_data;                                    // piezo_controller_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          piezo_controller_0_s1_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_003:in_0_ready -> piezo_controller_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                  // avalon_st_adapter_003:out_0_valid -> piezo_controller_0_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_003_out_0_data;                                                   // avalon_st_adapter_003:out_0_data -> piezo_controller_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                  // piezo_controller_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                  // avalon_st_adapter_003:out_0_error -> piezo_controller_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) spi_avalon_bridge_avalon_master_translator (
		.clk                    (clk_0_clk_clk),                                                                      //                       clk.clk
		.reset                  (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (spi_avalon_bridge_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (spi_avalon_bridge_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (spi_avalon_bridge_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                (spi_avalon_bridge_avalon_master_read),                                               //                          .read
		.av_readdata            (spi_avalon_bridge_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (spi_avalon_bridge_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (spi_avalon_bridge_avalon_master_write),                                              //                          .write
		.av_writedata           (spi_avalon_bridge_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) id_switch_0_avalon_slave_translator (
		.clk                    (clk_0_clk_clk),                                           //                      clk.clk
		.reset                  (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (id_switch_0_avalon_slave_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (id_switch_0_avalon_slave_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (id_switch_0_avalon_slave_agent_m0_read),                  //                         .read
		.uav_write              (id_switch_0_avalon_slave_agent_m0_write),                 //                         .write
		.uav_waitrequest        (id_switch_0_avalon_slave_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (id_switch_0_avalon_slave_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (id_switch_0_avalon_slave_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (id_switch_0_avalon_slave_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (id_switch_0_avalon_slave_agent_m0_writedata),             //                         .writedata
		.uav_lock               (id_switch_0_avalon_slave_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (id_switch_0_avalon_slave_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (id_switch_0_avalon_slave_address),                        //      avalon_anti_slave_0.address
		.av_write               (id_switch_0_avalon_slave_write),                          //                         .write
		.av_read                (id_switch_0_avalon_slave_read),                           //                         .read
		.av_readdata            (id_switch_0_avalon_slave_readdata),                       //                         .readdata
		.av_writedata           (id_switch_0_avalon_slave_writedata),                      //                         .writedata
		.av_waitrequest         (id_switch_0_avalon_slave_waitrequest),                    //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ptp_simple_us_0_avalon_slave_translator (
		.clk                    (clk_0_clk_clk),                                           //                      clk.clk
		.reset                  (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ptp_simple_us_0_avalon_slave_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (ptp_simple_us_0_avalon_slave_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (ptp_simple_us_0_avalon_slave_agent_m0_read),              //                         .read
		.uav_write              (ptp_simple_us_0_avalon_slave_agent_m0_write),             //                         .write
		.uav_waitrequest        (ptp_simple_us_0_avalon_slave_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (ptp_simple_us_0_avalon_slave_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (ptp_simple_us_0_avalon_slave_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (ptp_simple_us_0_avalon_slave_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (ptp_simple_us_0_avalon_slave_agent_m0_writedata),         //                         .writedata
		.uav_lock               (ptp_simple_us_0_avalon_slave_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (ptp_simple_us_0_avalon_slave_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (ptp_simple_us_0_avalon_slave_address),                    //      avalon_anti_slave_0.address
		.av_write               (ptp_simple_us_0_avalon_slave_write),                      //                         .write
		.av_read                (ptp_simple_us_0_avalon_slave_read),                       //                         .read
		.av_readdata            (ptp_simple_us_0_avalon_slave_readdata),                   //                         .readdata
		.av_writedata           (ptp_simple_us_0_avalon_slave_writedata),                  //                         .writedata
		.av_waitrequest         (ptp_simple_us_0_avalon_slave_waitrequest),                //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) realtime_clock_controll_0_avalon_slave_translator (
		.clk                    (clk_0_clk_clk),                                                 //                      clk.clk
		.reset                  (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (realtime_clock_controll_0_avalon_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (realtime_clock_controll_0_avalon_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (realtime_clock_controll_0_avalon_slave_agent_m0_read),          //                         .read
		.uav_write              (realtime_clock_controll_0_avalon_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (realtime_clock_controll_0_avalon_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (realtime_clock_controll_0_avalon_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (realtime_clock_controll_0_avalon_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (realtime_clock_controll_0_avalon_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (realtime_clock_controll_0_avalon_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (realtime_clock_controll_0_avalon_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (realtime_clock_controll_0_avalon_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (realtime_clock_controll_0_avalon_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (realtime_clock_controll_0_avalon_slave_write),                  //                         .write
		.av_read                (realtime_clock_controll_0_avalon_slave_read),                   //                         .read
		.av_readdata            (realtime_clock_controll_0_avalon_slave_readdata),               //                         .readdata
		.av_writedata           (realtime_clock_controll_0_avalon_slave_writedata),              //                         .writedata
		.av_waitrequest         (realtime_clock_controll_0_avalon_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_chipselect          (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) piezo_controller_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                           //                      clk.clk
		.reset                  (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (piezo_controller_0_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (piezo_controller_0_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (piezo_controller_0_s1_agent_m0_read),                     //                         .read
		.uav_write              (piezo_controller_0_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (piezo_controller_0_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (piezo_controller_0_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (piezo_controller_0_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (piezo_controller_0_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (piezo_controller_0_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (piezo_controller_0_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (piezo_controller_0_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (piezo_controller_0_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (piezo_controller_0_s1_write),                             //                         .write
		.av_read                (piezo_controller_0_s1_read),                              //                         .read
		.av_readdata            (piezo_controller_0_s1_readdata),                          //                         .readdata
		.av_writedata           (piezo_controller_0_s1_writedata),                         //                         .writedata
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_byteenable          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_waitrequest         (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_QOS_H                 (86),
		.PKT_QOS_L                 (86),
		.PKT_DATA_SIDEBAND_H       (84),
		.PKT_DATA_SIDEBAND_L       (84),
		.PKT_ADDR_SIDEBAND_H       (83),
		.PKT_ADDR_SIDEBAND_L       (83),
		.PKT_BURST_TYPE_H          (82),
		.PKT_BURST_TYPE_L          (81),
		.PKT_CACHE_H               (98),
		.PKT_CACHE_L               (95),
		.PKT_THREAD_ID_H           (91),
		.PKT_THREAD_ID_L           (91),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (89),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) spi_avalon_bridge_avalon_master_agent (
		.clk                   (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                 (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (spi_avalon_bridge_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (spi_avalon_bridge_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (spi_avalon_bridge_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (spi_avalon_bridge_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (spi_avalon_bridge_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (spi_avalon_bridge_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (spi_avalon_bridge_avalon_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (spi_avalon_bridge_avalon_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (spi_avalon_bridge_avalon_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (spi_avalon_bridge_avalon_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (spi_avalon_bridge_avalon_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (spi_avalon_bridge_avalon_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) id_switch_0_avalon_slave_agent (
		.clk                     (clk_0_clk_clk),                                             //             clk.clk
		.reset                   (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (id_switch_0_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (id_switch_0_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (id_switch_0_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (id_switch_0_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (id_switch_0_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (id_switch_0_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (id_switch_0_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (id_switch_0_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (id_switch_0_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (id_switch_0_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (id_switch_0_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (id_switch_0_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (id_switch_0_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (id_switch_0_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (id_switch_0_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (id_switch_0_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                       //                .channel
		.rf_sink_ready           (id_switch_0_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (id_switch_0_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (id_switch_0_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (id_switch_0_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (id_switch_0_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (id_switch_0_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (id_switch_0_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (id_switch_0_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (id_switch_0_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (id_switch_0_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (id_switch_0_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (id_switch_0_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (id_switch_0_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) id_switch_0_avalon_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (id_switch_0_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (id_switch_0_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (id_switch_0_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (id_switch_0_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (id_switch_0_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (id_switch_0_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (id_switch_0_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (id_switch_0_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (id_switch_0_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (id_switch_0_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ptp_simple_us_0_avalon_slave_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (ptp_simple_us_0_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ptp_simple_us_0_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ptp_simple_us_0_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ptp_simple_us_0_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ptp_simple_us_0_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (ptp_simple_us_0_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ptp_simple_us_0_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ptp_simple_us_0_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (ptp_simple_us_0_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ptp_simple_us_0_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (ptp_simple_us_0_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (ptp_simple_us_0_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ptp_simple_us_0_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (ptp_simple_us_0_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (ptp_simple_us_0_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (ptp_simple_us_0_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                       //                .channel
		.rf_sink_ready           (ptp_simple_us_0_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ptp_simple_us_0_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ptp_simple_us_0_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ptp_simple_us_0_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ptp_simple_us_0_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ptp_simple_us_0_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ptp_simple_us_0_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ptp_simple_us_0_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ptp_simple_us_0_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ptp_simple_us_0_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (ptp_simple_us_0_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ptp_simple_us_0_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ptp_simple_us_0_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ptp_simple_us_0_avalon_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (ptp_simple_us_0_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (ptp_simple_us_0_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (ptp_simple_us_0_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ptp_simple_us_0_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ptp_simple_us_0_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ptp_simple_us_0_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ptp_simple_us_0_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ptp_simple_us_0_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ptp_simple_us_0_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ptp_simple_us_0_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) realtime_clock_controll_0_avalon_slave_agent (
		.clk                     (clk_0_clk_clk),                                                           //             clk.clk
		.reset                   (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (realtime_clock_controll_0_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (realtime_clock_controll_0_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (realtime_clock_controll_0_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (realtime_clock_controll_0_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (realtime_clock_controll_0_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (realtime_clock_controll_0_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (realtime_clock_controll_0_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (realtime_clock_controll_0_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (realtime_clock_controll_0_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (realtime_clock_controll_0_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (realtime_clock_controll_0_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (realtime_clock_controll_0_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (realtime_clock_controll_0_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (realtime_clock_controll_0_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (realtime_clock_controll_0_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (realtime_clock_controll_0_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                                   //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                                   //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                                    //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                             //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                                 //                .channel
		.rf_sink_ready           (realtime_clock_controll_0_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (realtime_clock_controll_0_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (realtime_clock_controll_0_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (realtime_clock_controll_0_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (realtime_clock_controll_0_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (realtime_clock_controll_0_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (realtime_clock_controll_0_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (realtime_clock_controll_0_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (realtime_clock_controll_0_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (realtime_clock_controll_0_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (realtime_clock_controll_0_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (realtime_clock_controll_0_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (realtime_clock_controll_0_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) realtime_clock_controll_0_avalon_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                           //       clk.clk
		.reset             (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (realtime_clock_controll_0_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (realtime_clock_controll_0_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (realtime_clock_controll_0_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (realtime_clock_controll_0_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (realtime_clock_controll_0_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (realtime_clock_controll_0_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (realtime_clock_controll_0_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (realtime_clock_controll_0_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (realtime_clock_controll_0_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (realtime_clock_controll_0_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (85),
		.PKT_ORI_BURST_SIZE_L      (83),
		.PKT_RESPONSE_STATUS_H     (82),
		.PKT_RESPONSE_STATUS_L     (81),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (67),
		.PKT_PROTECTION_H          (76),
		.PKT_PROTECTION_L          (74),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (70),
		.PKT_SRC_ID_L              (69),
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (71),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (86),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) piezo_controller_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                             //             clk.clk
		.reset                   (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (piezo_controller_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (piezo_controller_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (piezo_controller_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (piezo_controller_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (piezo_controller_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (piezo_controller_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (piezo_controller_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (piezo_controller_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (piezo_controller_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (piezo_controller_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (piezo_controller_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (piezo_controller_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (piezo_controller_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (piezo_controller_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (piezo_controller_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (piezo_controller_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (piezo_controller_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (piezo_controller_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (piezo_controller_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (piezo_controller_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (piezo_controller_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (piezo_controller_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (piezo_controller_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (piezo_controller_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (piezo_controller_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (piezo_controller_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (piezo_controller_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (piezo_controller_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (piezo_controller_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (piezo_controller_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (piezo_controller_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (piezo_controller_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (piezo_controller_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (piezo_controller_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (piezo_controller_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (87),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) piezo_controller_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (piezo_controller_0_s1_agent_rf_source_data),              //        in.data
		.in_valid          (piezo_controller_0_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (piezo_controller_0_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (piezo_controller_0_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (piezo_controller_0_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (piezo_controller_0_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (piezo_controller_0_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (piezo_controller_0_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (piezo_controller_0_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (piezo_controller_0_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	vidor_sys_mm_interconnect_0_router router (
		.sink_ready         (spi_avalon_bridge_avalon_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (spi_avalon_bridge_avalon_master_agent_cp_valid),          //          .valid
		.sink_data          (spi_avalon_bridge_avalon_master_agent_cp_data),           //          .data
		.sink_startofpacket (spi_avalon_bridge_avalon_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (spi_avalon_bridge_avalon_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                        //       src.ready
		.src_valid          (router_src_valid),                                        //          .valid
		.src_data           (router_src_data),                                         //          .data
		.src_channel        (router_src_channel),                                      //          .channel
		.src_startofpacket  (router_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                   //          .endofpacket
	);

	vidor_sys_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (id_switch_0_avalon_slave_agent_rp_ready),                 //      sink.ready
		.sink_valid         (id_switch_0_avalon_slave_agent_rp_valid),                 //          .valid
		.sink_data          (id_switch_0_avalon_slave_agent_rp_data),                  //          .data
		.sink_startofpacket (id_switch_0_avalon_slave_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (id_switch_0_avalon_slave_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                    //       src.ready
		.src_valid          (router_001_src_valid),                                    //          .valid
		.src_data           (router_001_src_data),                                     //          .data
		.src_channel        (router_001_src_channel),                                  //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                               //          .endofpacket
	);

	vidor_sys_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (ptp_simple_us_0_avalon_slave_agent_rp_ready),             //      sink.ready
		.sink_valid         (ptp_simple_us_0_avalon_slave_agent_rp_valid),             //          .valid
		.sink_data          (ptp_simple_us_0_avalon_slave_agent_rp_data),              //          .data
		.sink_startofpacket (ptp_simple_us_0_avalon_slave_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (ptp_simple_us_0_avalon_slave_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                    //       src.ready
		.src_valid          (router_002_src_valid),                                    //          .valid
		.src_data           (router_002_src_data),                                     //          .data
		.src_channel        (router_002_src_channel),                                  //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                               //          .endofpacket
	);

	vidor_sys_mm_interconnect_0_router_001 router_003 (
		.sink_ready         (realtime_clock_controll_0_avalon_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (realtime_clock_controll_0_avalon_slave_agent_rp_valid),         //          .valid
		.sink_data          (realtime_clock_controll_0_avalon_slave_agent_rp_data),          //          .data
		.sink_startofpacket (realtime_clock_controll_0_avalon_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (realtime_clock_controll_0_avalon_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                 //       clk.clk
		.reset              (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_003_src_ready),                                          //       src.ready
		.src_valid          (router_003_src_valid),                                          //          .valid
		.src_data           (router_003_src_data),                                           //          .data
		.src_channel        (router_003_src_channel),                                        //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                     //          .endofpacket
	);

	vidor_sys_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (piezo_controller_0_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (piezo_controller_0_s1_agent_rp_valid),                    //          .valid
		.sink_data          (piezo_controller_0_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (piezo_controller_0_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (piezo_controller_0_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                    //       src.ready
		.src_valid          (router_004_src_valid),                                    //          .valid
		.src_data           (router_004_src_data),                                     //          .data
		.src_channel        (router_004_src_channel),                                  //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                               //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (89),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (87),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) spi_avalon_bridge_avalon_master_limiter (
		.clk                    (clk_0_clk_clk),                                                 //       clk.clk
		.reset                  (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                              //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                              //          .valid
		.cmd_sink_data          (router_src_data),                                               //          .data
		.cmd_sink_channel       (router_src_channel),                                            //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                      //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                        //          .endofpacket
		.cmd_src_ready          (spi_avalon_bridge_avalon_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (spi_avalon_bridge_avalon_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (spi_avalon_bridge_avalon_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (spi_avalon_bridge_avalon_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (spi_avalon_bridge_avalon_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                             //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                             //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                           //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                              //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                     //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                       //          .endofpacket
		.rsp_src_ready          (spi_avalon_bridge_avalon_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (spi_avalon_bridge_avalon_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (spi_avalon_bridge_avalon_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (spi_avalon_bridge_avalon_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (spi_avalon_bridge_avalon_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (spi_avalon_bridge_avalon_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (spi_avalon_bridge_avalon_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (67),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_BURST_TYPE_H          (64),
		.PKT_BURST_TYPE_L          (63),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (59),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (86),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (59),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) piezo_controller_0_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                             //       cr0.clk
		.reset                 (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (piezo_controller_0_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (piezo_controller_0_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (piezo_controller_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (piezo_controller_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (piezo_controller_0_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (piezo_controller_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (piezo_controller_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (piezo_controller_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (piezo_controller_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (piezo_controller_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (piezo_controller_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (piezo_controller_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	vidor_sys_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                 //        clk.clk
		.reset              (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset),       //  clk_reset.reset
		.sink_ready         (spi_avalon_bridge_avalon_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (spi_avalon_bridge_avalon_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (spi_avalon_bridge_avalon_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (spi_avalon_bridge_avalon_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (spi_avalon_bridge_avalon_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (spi_avalon_bridge_avalon_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                          //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                          //           .valid
		.src0_data          (cmd_demux_src0_data),                                           //           .data
		.src0_channel       (cmd_demux_src0_channel),                                        //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                  //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                    //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                          //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                          //           .valid
		.src1_data          (cmd_demux_src1_data),                                           //           .data
		.src1_channel       (cmd_demux_src1_channel),                                        //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                  //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                    //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                          //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                          //           .valid
		.src2_data          (cmd_demux_src2_data),                                           //           .data
		.src2_channel       (cmd_demux_src2_channel),                                        //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                  //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                    //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                          //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                          //           .valid
		.src3_data          (cmd_demux_src3_data),                                           //           .data
		.src3_channel       (cmd_demux_src3_channel),                                        //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                  //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket)                                     //           .endofpacket
	);

	vidor_sys_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                           //       clk.clk
		.reset               (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_src_valid),                                       //          .valid
		.src_data            (cmd_mux_src_data),                                        //          .data
		.src_channel         (cmd_mux_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src0_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                               //          .endofpacket
	);

	vidor_sys_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                           //       clk.clk
		.reset               (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                   //          .valid
		.src_data            (cmd_mux_001_src_data),                                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src1_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                               //          .endofpacket
	);

	vidor_sys_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                           //       clk.clk
		.reset               (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                   //          .valid
		.src_data            (cmd_mux_002_src_data),                                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src2_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                               //          .endofpacket
	);

	vidor_sys_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                           //       clk.clk
		.reset               (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                   //          .valid
		.src_data            (cmd_mux_003_src_data),                                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src3_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                               //          .endofpacket
	);

	vidor_sys_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                    //      sink.ready
		.sink_channel       (router_001_src_channel),                                  //          .channel
		.sink_data          (router_001_src_data),                                     //          .data
		.sink_startofpacket (router_001_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_001_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                               //          .endofpacket
	);

	vidor_sys_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                    //      sink.ready
		.sink_channel       (router_002_src_channel),                                  //          .channel
		.sink_data          (router_002_src_data),                                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_002_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                           //          .endofpacket
	);

	vidor_sys_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                    //      sink.ready
		.sink_channel       (router_003_src_channel),                                  //          .channel
		.sink_data          (router_003_src_data),                                     //          .data
		.sink_startofpacket (router_003_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_003_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                           //          .endofpacket
	);

	vidor_sys_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (piezo_controller_0_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (piezo_controller_0_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (piezo_controller_0_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (piezo_controller_0_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (piezo_controller_0_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (piezo_controller_0_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                             //          .endofpacket
	);

	vidor_sys_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                           //       clk.clk
		.reset               (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                       //       src.ready
		.src_valid           (rsp_mux_src_valid),                                       //          .valid
		.src_data            (rsp_mux_src_data),                                        //          .data
		.src_channel         (rsp_mux_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                    //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                    //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                  //          .channel
		.sink0_data          (rsp_demux_src0_data),                                     //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                              //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                              //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                 //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                        //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                          //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                              //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                 //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                        //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                          //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                              //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                 //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                        //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket)                           //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (59),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (62),
		.IN_PKT_BURST_SIZE_L           (60),
		.IN_PKT_RESPONSE_STATUS_H      (82),
		.IN_PKT_RESPONSE_STATUS_L      (81),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (64),
		.IN_PKT_BURST_TYPE_L           (63),
		.IN_PKT_ORI_BURST_SIZE_L       (83),
		.IN_PKT_ORI_BURST_SIZE_H       (85),
		.IN_ST_DATA_W                  (86),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (80),
		.OUT_PKT_BURST_SIZE_L          (78),
		.OUT_PKT_RESPONSE_STATUS_H     (100),
		.OUT_PKT_RESPONSE_STATUS_L     (99),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (82),
		.OUT_PKT_BURST_TYPE_L          (81),
		.OUT_PKT_ORI_BURST_SIZE_L      (101),
		.OUT_PKT_ORI_BURST_SIZE_H      (103),
		.OUT_ST_DATA_W                 (104),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) piezo_controller_0_s1_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                             //       clk.clk
		.reset                (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_004_src_valid),                                      //      sink.valid
		.in_channel           (router_004_src_channel),                                    //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_004_src_ready),                                      //          .ready
		.in_data              (router_004_src_data),                                       //          .data
		.out_endofpacket      (piezo_controller_0_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (piezo_controller_0_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (piezo_controller_0_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (piezo_controller_0_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (piezo_controller_0_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (piezo_controller_0_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (77),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (80),
		.IN_PKT_BURST_SIZE_L           (78),
		.IN_PKT_RESPONSE_STATUS_H      (100),
		.IN_PKT_RESPONSE_STATUS_L      (99),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (82),
		.IN_PKT_BURST_TYPE_L           (81),
		.IN_PKT_ORI_BURST_SIZE_L       (101),
		.IN_PKT_ORI_BURST_SIZE_H       (103),
		.IN_ST_DATA_W                  (104),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (62),
		.OUT_PKT_BURST_SIZE_L          (60),
		.OUT_PKT_RESPONSE_STATUS_H     (82),
		.OUT_PKT_RESPONSE_STATUS_L     (81),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (64),
		.OUT_PKT_BURST_TYPE_L          (63),
		.OUT_PKT_ORI_BURST_SIZE_L      (83),
		.OUT_PKT_ORI_BURST_SIZE_H      (85),
		.OUT_ST_DATA_W                 (86),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) piezo_controller_0_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                             //       clk.clk
		.reset                (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                     //          .ready
		.in_data              (cmd_mux_003_src_data),                                      //          .data
		.out_endofpacket      (piezo_controller_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (piezo_controller_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (piezo_controller_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (piezo_controller_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (piezo_controller_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (piezo_controller_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	vidor_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (id_switch_0_avalon_slave_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (id_switch_0_avalon_slave_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (id_switch_0_avalon_slave_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                            //         .error
	);

	vidor_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ptp_simple_us_0_avalon_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (ptp_simple_us_0_avalon_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (ptp_simple_us_0_avalon_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                        //         .error
	);

	vidor_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                     // in_clk_0.clk
		.in_rst_0_reset (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (realtime_clock_controll_0_avalon_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (realtime_clock_controll_0_avalon_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (realtime_clock_controll_0_avalon_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                  //         .error
	);

	vidor_sys_mm_interconnect_0_avalon_st_adapter_003 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (spi_avalon_bridge_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (piezo_controller_0_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (piezo_controller_0_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (piezo_controller_0_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                        //         .error
	);

endmodule
